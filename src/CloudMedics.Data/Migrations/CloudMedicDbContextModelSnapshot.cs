// <auto-generated />
using CloudMedics.Data;
using CloudMedics.Domain.Enumerations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CloudMedics.Data.Migrations
{
    [DbContext(typeof(CloudMedicDbContext))]
    partial class CloudMedicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("CloudMedics.Domain.Models.Appointment", b =>
                {
                    b.Property<int>("PatientId");

                    b.Property<int>("DoctorId");

                    b.Property<string>("AilmentDescription");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("ScheduledDate");

                    b.Property<int>("Status");

                    b.Property<string>("Symptoms");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.AppUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountStatus");

                    b.Property<int>("AccountType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<char>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProfileSummary");

                    b.Property<Guid?>("UserAccountUserId");

                    b.Property<string>("UserId");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserAccountUserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<string>("Occupation");

                    b.Property<int>("PatientType");

                    b.Property<Guid?>("UserAccountUserId");

                    b.Property<int>("UserId");

                    b.HasKey("PatientId");

                    b.HasIndex("UserAccountUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.Appointment", b =>
                {
                    b.HasOne("CloudMedics.Domain.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CloudMedics.Domain.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.Doctor", b =>
                {
                    b.HasOne("CloudMedics.Domain.Models.AppUser", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountUserId");
                });

            modelBuilder.Entity("CloudMedics.Domain.Models.Patient", b =>
                {
                    b.HasOne("CloudMedics.Domain.Models.AppUser", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
